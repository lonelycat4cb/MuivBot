import telebot
import pyqrcode
from telebot import types
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
import time

bot = telebot.TeleBot('5838447318:AAGlaNIsRiM2jHWU8XDNjepn45ZY-3mqQso')

# ----------------------------------------------------------–ö–Ω–æ–ø–∫–∏_—è–∑—ã–∫–∞_–ø—Ä–∏_—Å—Ç–∞—Ä—Ç–µ----------------------------------------------------------
btnLanguage = telebot.types.ReplyKeyboardMarkup()
btnLanguage.row('–†—É—Å—Å–∫–∏–πüá∑üá∫')
btnLanguage.row('Englishüá¨üáß')

# --------------------------------------QR_CODE----------------------------------QR_CODE-------------------------------------------

#big_code = pyqrcode.create("https://pypi.org/project/pyTelegramBotAPI/")
#big_code.png('codqrine12.png', scale=8, module_color=[0, 0, 0], background=[0xff, 0xff, 0xff])


# ----------------------------------------------------------–°—Ç–∞—Ä—Ç----------------------------------------------------------
@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
def start_message(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language', reply_markup=btnLanguage)


# ----------------------------------------------------------–í–æ–∑–≤—Ä–∞—Ç_–≤_–Ω–∞—á–∞–ª–æ----------------------------------------------------------
@bot.message_handler(func=lambda
        message: message.text.lower() == '<–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ>'.lower() or message.text.lower() == '<Return to start>'.lower())
def btn_login_ru(message):
    start_message(message)


# ----------------------------------------------------------–í–æ–∑–≤—Ä–∞—Ç_–Ω–∞–∑–∞–¥----------------------------------------------------------
@bot.message_handler(
    func=lambda message: message.text.lower() == '<–Ω–∞–∑–∞–¥>'.lower() or message.text.lower() == '<back>'.lower())
def btn_back(message):
    btn_welcome(message)


# ----------------------------------------------------------–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫_—è–∑—ã–∫–∞----------------------------------------------------------
dictMsg = {
    'en': {
        '–ó–∞–±—ã–ª –ª–æ–≥–∏–Ω': 'Forget login',
        '–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å': 'Forget password',
        '‚úí–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å': '‚úíEnter password',
        'Welcome': 'Welcome',
        '<–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ>': '<Return to start>',
        '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': 'Average score',
        '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å': 'Attendance',
        '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è': 'Events',
        '–°—Ç–æ–∏–º–æ—Å—Ç—å ‚ÇΩ': 'Cost $',
        '–ö–æ–Ω–µ—Ü –æ–±—É—á–µ–Ω–∏—è': 'The end of the training',
        '–û—Ç–∑—ã–≤—ã': 'Feedback',
        '–ö–æ–≥–¥–∞ –ø–∞—Ä–∞?': 'When pairs?',
        '–ì–¥–µ –ø–∞—Ä–∞?': 'Where pairs?',
        '<–ù–∞–∑–∞–¥>': '<Back>',
        '–û–ø–ª–∞—Ç–∞': 'Payment',
        '–ö–æ–Ω—Ç–∞–∫—Ç—ã': 'Contacts',
        '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ': 'Schedule',
        '–†–µ–π—Ç–∏–Ω–≥': 'Rating',
        '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é': 'Repeat Authorize'
    },
    'ru': {
        '–ó–∞–±—ã–ª –ª–æ–≥–∏–Ω': '–ó–∞–±—ã–ª –ª–æ–≥–∏–Ω',
        '–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å': '–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å',
        '‚úí–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å': '‚úí–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
        'Welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        '<–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ>': '<–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ>',
        '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª',
        '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å': '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å',
        '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è': '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        '–°—Ç–æ–∏–º–æ—Å—Ç—å ‚ÇΩ': '–°—Ç–æ–∏–º–æ—Å—Ç—å ‚ÇΩ',
        '–ö–æ–Ω–µ—Ü –æ–±—É—á–µ–Ω–∏—è': '–ö–æ–Ω–µ—Ü –æ–±—É—á–µ–Ω–∏—è',
        '–û—Ç–∑—ã–≤—ã': '–û—Ç–∑—ã–≤—ã',
        '–ö–æ–≥–¥–∞ –ø–∞—Ä–∞?': '–ö–æ–≥–¥–∞ –ø–∞—Ä–∞?',
        '–ì–¥–µ –ø–∞—Ä–∞?': '–ì–¥–µ –ø–∞—Ä–∞?',
        '<–ù–∞–∑–∞–¥>': '<–ù–∞–∑–∞–¥>',
        '–û–ø–ª–∞—Ç–∞': '–û–ø–ª–∞—Ç–∞',
        '–ö–æ–Ω—Ç–∞–∫—Ç—ã': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ': '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        '–†–µ–π—Ç–∏–Ω–≥': '–†–µ–π—Ç–∏–Ω–≥',
        '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é': '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'
    }
}

# —Ñ–ª–∞–≥ —è–∑—ã–∫–∞
lang = 'en'
# —Ñ–ª–∞–≥ —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
awaitAuth = 0
# login user
uLogin = ''
# password user
uPsswd = ''


######
# –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏   –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å btn_ - –≤—ã–≤–æ–¥—è—Ç –∫–Ω–æ–ø–∫–∏
#               –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è c save_ - —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ

# ----------------------------------------------------------–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è_–Ω–∞_—Ä—É—Å—Å–∫–æ–º-------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '—Ä—É—Å—Å–∫–∏–πüá∑üá∫')
def btn_login_ru(message):
    global awaitAuth, lang
    awaitAuth = 1
    lang = 'ru'
    k = telebot.types.ReplyKeyboardMarkup()
    k.row('–ó–∞–±—ã–ª –ª–æ–≥–∏–Ω')
    k.row('<–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ>')
    bot.send_message(message.chat.id, '‚úè–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:', reply_markup=k)


# ----------------------------------------------------------–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è_–Ω–∞_–∞–Ω–≥–ª–∏–π—Å–∫–æ–º----------------------------------------------------------
@bot.message_handler(func=lambda message: message.text.lower() == 'englishüá¨üáß')
def btn_login_en(message):
    global awaitAuth, lang
    awaitAuth = 1
    lang = 'en'
    k = telebot.types.ReplyKeyboardMarkup()
    k.row('Forget login')
    k.row('<Return to start>')
    bot.send_message(message.chat.id, '‚úèEnter login:', reply_markup=k)


# ----------------------------------------------------------–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ_–ª–æ–≥–∏–Ω–∞------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.content_type == 'text' and awaitAuth == 1)
def save_user_login(message):
    global uLogin, lang, awaitAuth
    awaitAuth = 2
    uLogin = message.text
    k = telebot.types.ReplyKeyboardMarkup()
    k.row('–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å')
    k.row('<–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ>')
    bot.send_message(message.chat.id, dictMsg[lang]['‚úí–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'])


# ----------------------------------------------------------–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ_–ø–∞—Ä–æ–ª—è----------------------------------------------------------
@bot.message_handler(func=lambda message: message.content_type == 'text' and awaitAuth == 2)
def save_user_passwd(message):
    global uLogin, uPsswd, lang, awaitAuth
    browser = webdriver.Edge()
    browser.get("https://e.muiv.ru/login/index.php")
    elem_usr = browser.find_element(By.ID, 'username')
    elem_pas = browser.find_element(By.ID, 'password')
    elem_lgnbtn = browser.find_element(By.ID, 'loginbtn')

    awaitAuth = 0
    uPsswd = message.text

    for i in uLogin:
        elem_usr.send_keys(i)
        time.sleep(0.3)

    for n in uPsswd:
        elem_pas.send_keys(n)
        time.sleep(0.3)

    elem_lgnbtn.click()

    WebDriverWait(driver=browser, timeout=10).until(
        lambda x: x.execute_script("return document.readyState === 'complete'")
    )
    error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."
    errors = browser.find_elements(By.XPATH, '/html/body/div[2]/div[2]/div/div/section/div/div[2]/div/div/div/div/div[1]/div')
    if any(error_message in e.text for e in errors):
        print("[!] Login failed")
        btn_login_ru(message)
    else:
        print("[+] Login successful")
        btn_welcome(message)


# ----------------------------------------------------------–ü–∞–Ω–µ–ª—å----------------------------------------------------------

def btn_welcome(message):
    k = telebot.types.ReplyKeyboardMarkup()
    bot.send_message(message.chat.id, dictMsg[lang]['Welcome'], reply_markup=k)
    k.row(dictMsg[lang]['–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª'], dictMsg[lang]['–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å'], dictMsg[lang]['–°—Ç–æ–∏–º–æ—Å—Ç—å ‚ÇΩ'],
          dictMsg[lang]['–û–ø–ª–∞—Ç–∞'])
    k.row(dictMsg[lang]['–ö–æ–Ω–µ—Ü –æ–±—É—á–µ–Ω–∏—è'], dictMsg[lang]['–û—Ç–∑—ã–≤—ã'], dictMsg[lang]['–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'])
    k.row(dictMsg[lang]['–ö–æ–Ω—Ç–∞–∫—Ç—ã'], dictMsg[lang]['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'])
    k.row(dictMsg[lang]['–†–µ–π—Ç–∏–Ω–≥'])
    k.row(dictMsg[lang]['<–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ>'])
    if lang == 'ru':
        bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=k)
    else:
        bot.send_message(message.chat.id, 'What do you want to know?', reply_markup=k)


# ----------------------------------------------------------–†–µ–π—Ç–∏–Ω–≥------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text.lower() == '—Ä–µ–π—Ç–∏–Ω–≥' or message.text.lower() == 'rating')
def rating(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–†–µ–π—Ç–∏–Ω–≥:')
        bot.send_message(message.chat.id, '–ö–æ–ª—è - 1003‚òÜ')
        bot.send_message(message.chat.id, '–ú–∞—à–∞ - 996‚òÜ')
        bot.send_message(message.chat.id, '–ê—Ä—Å–µ–Ω–∏–π - 879‚òÜ')
        bot.send_message(message.chat.id, '–ê–ª–µ–∫—Å–µ–π - 740‚òÜ')
    else:
        bot.send_message(message.chat.id, 'Rating:')
        bot.send_message(message.chat.id, 'Jhon - 1003‚òÜ')
        bot.send_message(message.chat.id, 'Anna - 996‚òÜ')
        bot.send_message(message.chat.id, 'Kate - 879‚òÜ')
        bot.send_message(message.chat.id, 'Stefania - 740‚òÜ')


# ----------------------------------------------------------–û–ø–ª–∞—Ç–∞------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text.lower() == '–æ–ø–ª–∞—Ç–∞' or message.text.lower() == 'payment')
def payment(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, 'QR –¥–ª—è –æ–ø–ª–∞—Ç—ã:')
    else:
        bot.send_message(message.chat.id, 'QR for payment:')


# ----------------------------------------------------------–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ----------------------------------------------------------
@bot.message_handler(
    func=lambda message: message.text.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' or message.text.lower() == 'schedule')
def schedule(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–£—Ä–æ–∫–∏ –±—É–¥—É—Ç: 24 –ú–∞—è, 31 –ú–∞—è')
    else:
        bot.send_message(message.chat.id, 'Lessons will be: 24 May, 31 May')


# ----------------------------------------------------------–°—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª----------------------------------------------------------

@bot.message_handler(
    func=lambda message: message.text.lower() == '—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª' or message.text.lower() == 'average score')
def average_score(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 11')
    else:
        bot.send_message(message.chat.id, 'Your average score: 11')


# ----------------------------------------------------------–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å----------------------------------------------------------
@bot.message_handler(
    func=lambda message: message.text.lower() == '–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å' or message.text.lower() == 'attendance')
def attendance(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–í–∞—à–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: 100%')
    else:
        bot.send_message(message.chat.id, 'Your attendance: 100%')


# ----------------------------------------------------------–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è----------------------------------------------------------
@bot.message_handler(func=lambda message: message.text.lower() == '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' or message.text.lower() == 'events')
def events(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–ë—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä –®–ê–ì')
    else:
        bot.send_message(message.chat.id, 'Future events: Summer ISTEP camp')


# ----------------------------------------------------------–°—Ç–æ–∏–º–æ—Å—Ç—å_–æ–±—É—á–µ–Ω–∏—è----------------------------------------------------------

@bot.message_handler(
    func=lambda message: message.text.lower() == '—Å—Ç–æ–∏–º–æ—Å—Ç—å ‚ÇΩ' or message.text.lower() == 'cost $')
def cost(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å: 15 000 —Ä—É–±–ª–µ–π')
    else:
        bot.send_message(message.chat.id, 'Cost: 200 dollars')


# ----------------------------------------------------------–ö–æ–Ω–µ—Ü_–æ–±—É—á–µ–Ω–∏—è----------------------------------------------------------

@bot.message_handler(
    func=lambda message: message.text.lower() == '–∫–æ–Ω–µ—Ü –æ–±—É—á–µ–Ω–∏—è' or message.text.lower() == 'the end of the training')
def end_training(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–û–±—É—á–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: 31 –ú–∞—è')
    else:
        bot.send_message(message.chat.id, 'Training will end: 31 May')


# ----------------------------------------------------------–û—Ç–∑—ã–≤—ã_–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π----------------------------------------------------------

@bot.message_handler(
    func=lambda message: message.text.lower() == '–æ—Ç–∑—ã–≤—ã' or message.text.lower() == 'feedback')
def teachers_feedback(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–õ–µ–æ–Ω–∏–¥: –°–ø–æ—Å–æ–±–Ω—ã–π –º–∞–ª—ã–π, –≤–æ–æ–±—â–µ –∫–ª—ë–≤—ã–π –ø–∞—Ä–µ–Ω—å')
    else:
        bot.send_message(message.chat.id, 'Jhon: Good boy, very cool on pairs')


# ----------------------------------------------------------–ö–æ–Ω—Ç–∞–∫—Ç—ã----------------------------------------------------------

@bot.message_handler(
    func=lambda message: message.text.lower() == '–∫–æ–Ω—Ç–∞–∫—Ç—ã' or message.text.lower() == 'contacts')
def contacts(message):
    if lang == 'ru':
        bot.send_message(message.chat.id, '–ü—Ä–∏—ë–º–Ω–∞—è: +74951511901')
        bot.send_message(message.chat.id, '–£—á–µ–±–Ω–∞—è —á–∞—Å—Ç—å: +74951324400')
    else:
        bot.send_message(message.chat.id, 'Reception Office: +74951511901')
        bot.send_message(message.chat.id, 'Teaching Department: +74951324400')


bot.polling(none_stop=True)
